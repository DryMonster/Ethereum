// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Copyright{
// Events 
event RegisteredContent (uint256 counter, bytes32 indexed hashId, string indexed contentUrl,
address indexed owner, uint256 timestamp, string email, string termsOfUse);

struct Content{
    uint256 counter;
    bytes32 hashId;
    string contentUrl;
    address owner;
    uint256 timestamp;
    string email;
    string termsOfUse;
}

mapping(bytes32 => Content) public copyrightsById;
uint256 public counter = 0;
address payable public owner;

constructor() {
    owner = payable(msg.sender);
}
// Function to add Content
function addContent(bytes32 _hashId, string memory _contentUrl, string
memory _email, string memory _termsOfUse) public {
    require(_hashId != 0 && bytes(_contentUrl).length != 0 && 
    bytes(_email).length != 0);

    counter += 1;
    Content memory newContent  = Content(counter, _hashId, _contentUrl, msg.sender, block.timestamp, _email, _termsOfUse );
    copyrightsById[_hashId] = newContent; 
    emit RegisteredContent(counter, _hashId, _contentUrl, msg.sender, block.timestamp, _email, _termsOfUse);
}

function deleteCopyrightedByHash(bytes32 _hashId) public{
    if(copyrightsById[_hashId].owner == msg.sender){
        delete copyrightsById[_hashId].owner;
    }
}

function extractFunds() public {
    owner.transfer(address(this).balance);
}
}
